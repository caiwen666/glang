glang的目标是一个轻量级且灵活性高的语言，目前正在编写

glang
	---exception：自己实现的异常类
		-Exception.cpp：所有异常类的父类
		-ExpressionException.cpp：分析表达式时的异常
		-ParseException.cpp：解析token时的异常
	---parse：有关解析的类
		-Node.h：解析出来的表达式所存放的类
		-Expression.cpp：根据token解析表达式，生成Node类
		-parse.cpp：解析token，生成token类
		-token.cpp：解析出来的token存放的类
	-main.cpp：程序主体，提供了一个简单的demo

执行过程
	main->parse->token->Expression->Node

进度
	四则混合运算
		token解析.....完成 2019-8-30
		表达式树分析.....正在进行 2019-8-31 到 现在
		表达式执行器.....未完成
	更多类型运算(加入数据类型，更多运算符)
		token解析.....未完成
		表达式树分析.....未完成
		表达式执行器.....未完成
	变量运算(加入赋值运算符，创建变量表)
		token解析.....未完成
		表达式树分析.....未完成
		表达式执行器.....未完成
	函数表达式运算
		token解析.....未完成
		表达式树分析.....未完成
		表达式执行器.....未完成
	添油加醋.....未完成
	最后优化(#1000版本完成).....未完成

规划
	#1000只提供基本的变量，函数，运算功能
	#2000打算加入类，和glang独有的特性（代码块更新，ref引用，还有其他的表达式类型），此时已经算是一个成熟的语言了
	#3000打算继续优化性能，加入大量的库，demo等，整理文档并正式使用
	#4000打算实行跨平台跨语言，充分发挥其灵活的目标
	后续版本就是修bug，优化和紧跟时代步伐，当然有一些我们不敢想的，希望以后能做到：可以编译成exe或其他语言的代码（我觉得这个可以在#1000开发完后消遣时做一下），用c以外的语言编写等